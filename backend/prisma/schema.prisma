// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  email    String? @unique
  password String?
  name     String?
  token    String? @unique

  role         Role    @default(USER)
  profilePhoto String?
  avatar       String?

  passwordResetToken   String?
  passwordResetExpires DateTime?

  tests     Test[]
  createdAt DateTime  @default(now())
  comments  Comment[]
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  questions Question[]
  words     Word[]
}

model QuestionSeries {
  id        String     @id @default(uuid())
  name      String // e.g., "Reading A1 - 1"
  questions Question[]
  tests     Test[]
}

model Question {
  id          String @id @default(uuid())
  text        String @db.Text
  options     String @db.Text // Store as JSON string: '["A","B","C","D"]'
  correct     String
  explanation String @db.Text

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  series   QuestionSeries? @relation(fields: [seriesId], references: [id])
  seriesId String?

  answers TestAnswer[]
}

model Test {
  id     String  @id @default(uuid())
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  series   QuestionSeries? @relation(fields: [seriesId], references: [id])
  seriesId String?

  score     Int
  time      Int // Duration in seconds
  correct   Int // Number of correct answers
  mistakes  Int // Number of wrong answers
  createdAt DateTime @default(now())

  category String // <-- Added field for frontend grouping
  // Only tests explicitly marked as ranked should appear in Rankings
  isRanked Boolean @default(false)

  answers TestAnswer[]
}

model TestAnswer {
  id     String @id @default(uuid())
  test   Test   @relation(fields: [testId], references: [id])
  testId String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  selected String
  correct  Boolean
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  exam      String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Game Models
model WordHuntQuestion {
  id           String   @id @default(uuid())
  turkish      String // Turkish word
  english      String // Correct English translation
  wrongOption  String // Wrong option for multiple choice
  alternatives String // JSON array of alternative wrong options
  level        String   @default("A1") // A1, A2, B1, B2
  createdAt    DateTime @default(now())
}

model WritingQuestion {
  id        String   @id @default(uuid())
  turkish   String // Turkish word to translate
  english   String // Correct English translation
  level     String   @default("A1") // A1, A2, B1, B2
  createdAt DateTime @default(now())
}

model ParagraphQuestion {
  id             String   @id @default(uuid())
  title          String // Title of the paragraph
  text           String   @db.Text // Paragraph text with ______ blanks
  options        String   @db.Text // JSON array of all options (including extra one)
  correctAnswers String   @db.Text // JSON array of correct answers in order
  level          String   @default("A1") // A1, A2, B1, B2
  createdAt      DateTime @default(now())
}

model Word {
  id         String    @id @default(uuid())
  english    String
  turkish    String
  example    String?
  level      String    @default("A1") // A1, A2, B1, B2
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // New relation for multiple examples
  examples WordExample[]
}

model WordExample {
  id          String   @id @default(uuid())
  word        Word     @relation(fields: [wordId], references: [id], onDelete: Cascade)
  wordId      String
  sentence    String
  translation String // Türkçe çeviri
  createdAt   DateTime @default(now())
}

// Word Matching game (sets + items). This is additive and does not touch existing tables.
model WordMatchSet {
  id        String   @id @default(uuid())
  title     String
  level     String   @default("A1") // A1, A2, B1, B2
  createdAt DateTime @default(now())

  items WordMatchItem[]
}

model WordMatchItem {
  id        String       @id @default(uuid())
  set       WordMatchSet @relation(fields: [setId], references: [id], onDelete: Cascade)
  setId     String
  english   String
  turkish   String
  createdAt DateTime     @default(now())
}

// Reading game: long passage with 4-5 MCQs
model ReadingPassage {
  id        String   @id @default(uuid())
  title     String
  text      String   @db.Text
  level     String   @default("A1") // A1, A2, B1, B2
  createdAt DateTime @default(now())

  questions ReadingQuestion[]
}

model ReadingQuestion {
  id           String         @id @default(uuid())
  passage      ReadingPassage @relation(fields: [passageId], references: [id], onDelete: Cascade)
  passageId    String
  question     String
  options      String         @db.Text // JSON array of options
  correctIndex Int
  explanation  String?        @db.Text
  createdAt    DateTime       @default(now())
}

// Persisted previews for topics/grammar/difficulty/gains
model ExamPreview {
  id           String   @id @default(uuid())
  categoryId   Int?
  seriesId     String?
  total        Int      @default(0)
  alternatives String   @db.Text // JSON array of alternative wrong options
  grammar      Json?
  difficulty   Json?
  gains        Json?
  source       String   @default("heuristic") // ai | heuristic | client
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([categoryId, seriesId])
  @@index([categoryId])
  @@index([seriesId])
}

enum Role {
  ADMIN
  USER
}
